buildscript {
    ext.kotlin_version = '1.3.72'
    ext.jruby_gradle_plugin_version = '2.0.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jruby-gradle:jruby-gradle-plugin:$jruby_gradle_plugin_version"
        classpath "com.github.jruby-gradle:jruby-gradle-jar-plugin:$jruby_gradle_plugin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:[1.2.2,2.0)"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'application'
    id "com.github.jruby-gradle.base" version "$jruby_gradle_plugin_version"
    id "com.github.jruby-gradle.jar" version "$jruby_gradle_plugin_version"
    id 'org.ajoberstar.grgit' version '4.0.2' apply false
}

apply plugin: 'com.github.jruby-gradle.base'
apply plugin: 'com.github.jruby-gradle.jar'

import com.github.jrubygradle.JRubyExec
import org.ajoberstar.grgit.Grgit

group = 'jp.gr.java_conf.hangedman.mmd'
version = '1.0-SNAPSHOT'
description = 'PMD loading sample program'
mainClassName = 'jp.gr.java_conf.hangedman.mmd.MainKt'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation "uk.org.lidalia:sysout-over-slf4j:1.0.2"
    implementation "io.github.microutils:kotlin-logging:1.7.9"
    implementation "org.joml:joml:1.9.24"
    implementation "org.apache.commons:commons-lang3:3.7"
    implementation "ch.qos.logback:logback-classic:1.2.3"

    testImplementation "org.junit.jupiter:junit-jupiter:5.6.2"
    runtimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.0-M1"

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-bgfx"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nanovg"
    implementation "org.lwjgl:lwjgl-nuklear"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-par"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.lwjgl:lwjgl-vulkan"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-bgfx::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nanovg::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nuklear::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-par::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // ruby
    implementation "org.jruby:jruby-complete:9.2.11.1"
    //gems 'rubygems:rake:10.3.+'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/generated/java']
        }
    }
}

task installGem(type: JRubyExec) {
    script "gem"
    scriptArgs "install", "rake:10.5.0", "bones:3.8.4", "hoe:3.22.1", "rspec:1.3.0", "bundler", "rubyzip", "user-choices"
}

task prepareRawr(type: JRubyExec) {
    dependsOn 'installGem'

    def rawrDir = "$project.projectDir/rawr"
    doFirst {
        if (!new File(rawrDir).exists()) {
            println("rawr git repository not exist... cloning")
            def grgit = Grgit.clone(dir: "$project.projectDir/rawr", uri: "https://github.com/rawr/rawr.git")
            grgit.describe()
        }
        def grgit = Grgit.open(dir: rawrDir)
        grgit.pull(rebase: false)
    }

    jrubyArgs "-I${buildDir}/.gems/gems/bones-3.8.4/lib",   \
              "-I${buildDir}/.gems/gems/rspec-1.3.0/lib",   \
              "-I${buildDir}/.gems/gems/hoe-3.22.1/lib",    \
              "-I${rawrDir}/lib", "-S", "rake", "_10.5.0_", \
              "-f", "${rawrDir}/Rakefile"
}

task execRawrInstall(type: JRubyExec) {
    dependsOn 'prepareRawr'
    def rawrDir = "$project.projectDir/rawr"
    jrubyArgs "-S", "gem", "install", "--local", "pkg/rawr-1.8.3.gem"
}

task prepareLocalJRuby(type: Copy) {
    def jrubyDir = "$project.projectDir/vendor"
    doFirst {
        if (!new File(jrubyDir).exists()) {
            println("jruby local dir doesn't exist... creating")
            new File(jrubyDir).mkdir()
        }
    }

    configurations.implementation.canBeResolved(true)
    configurations.implementation.files.each { file ->
        if (file.path.contains("jruby-complete")) {
            println(file.parent)
            from file.parent
            into jrubyDir
            include '*.jar'
        }
    }
}

task compileRuby(type: JRubyExec) {
    //jrubyArgs '-S', 'jrubyc', '--java', '-t', "${projectDir}/src/generated/java"
    //script 'main.rb'

    doFirst {
        mkdir "${projectDir}/src/generated/java"
    }
}

task prepareCompiledRuby {
    dependsOn 'compileRuby', 'compileKotlin'
}

test {
    useJUnitPlatform()

//    testLogging {
//        events "passed", "failed"
//    }

    reports {
        html.enabled = true
    }

    dependsOn 'cleanTest'
}

jrubyJar {
    dependsOn 'prepareCompiledRuby'
    //mainClass 'com.github.jrubygradle.sandbox.Main'
    initScript library()

    from "${buildDir}/classes/java/main"
    into('assets') {
        from 'assets'
    }
    archiveName "${rootProject.name}.jar"
}

task testRawr(type: JRubyExec) {
    def rawrDir = "$project.projectDir/rawr"
    jrubyArgs "-I${buildDir}/.gems/gems/bones-3.8.4/lib",   \
              "-I${buildDir}/.gems/gems/rspec-1.3.0/lib",   \
              "-I${buildDir}/.gems/gems/hoe-3.22.1/lib",    \
              "-I${rawrDir}/lib", "-S", "rake", "_10.5.0_", \
              "-f", "${rawrDir}/Rakefile"
}
